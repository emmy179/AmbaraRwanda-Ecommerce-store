%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2390 1929
%%HiResBoundingBox: 0 0 2389.9199 1928.88
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2389.9199 1928.88 re
W
q
[0.24 0 0 -0.24 0 1928.88] cm
q
0 0 9958.333 8036.0557 re
W*
q
[29.118984 0 0 29.12747 291.19098 291.27469] cm
q
5 65 m
161 0 l
317 65 l
161 10 l
5 65 l
h
5 176 m
161 256 l
317 171 l
161 246 l
5 176 l
h
W*
[311.999996 0 0 256.000003 5 -0.0000032454] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
q
[21.131945 0 0 21.138102 3941.8848 2288.6799] cm
q
92.969002 54.902 m
88.985001 51.361 86.328003 50.031002 77.917 48.261002 c
69.503998 46.491001 64.414001 42.949001 64.414001 42.949001 c
41.834999 31.218 l
41.834999 31.218 38.071999 27.896999 36.522999 30.552999 c
34.973 33.209 32.759998 36.307999 32.759998 36.307999 c
32.759998 36.307999 19.48 46.710999 13.280998 37.636997 c
9.074999 32.102997 6.639998 36.971996 6.639998 36.971996 c
5.09 60.879002 l
5.09 60.879002 3.541 66.191002 13.28 67.299004 c
23.019001 68.404007 24.790001 68.627007 24.790001 68.627007 c
24.790001 68.627007 28.526001 68.932007 30.988001 66.856003 c
31.337002 66.622002 31.748001 66.426003 32.184002 66.249001 c
39.533001 42.579002 l
43.970001 44.395004 l
37.322002 65.354004 l
38.331001 65.342003 39.374001 65.407005 40.413002 65.536003 c
46.616001 45.497002 l
50.976002 47.226002 l
44.939003 66.589005 l
45.927002 66.944008 46.839005 67.372002 47.637001 67.874008 c
53.704002 48.297009 l
58.036003 50.025009 l
51.812004 70.036011 l
54.507004 70.73101 57.109005 70.397011 57.109005 70.397011 c
74.153008 69.735008 l
74.153008 69.735008 88.984009 67.299011 91.640007 65.528008 c
94.296005 63.757004 96.952003 58.443001 92.969002 54.902 c
h
41.393002 40.292999 m
40.110001 40.292999 39.069 39.252998 39.069 37.968998 c
39.069 36.684998 40.110001 35.643997 41.393002 35.643997 c
42.677002 35.643997 43.717003 36.684998 43.717003 37.968998 c
43.716999 39.254002 42.675999 40.292999 41.393002 40.292999 c
h
48.366001 42.950001 m
47.082001 42.950001 46.042 41.91 46.042 40.625999 c
46.042 39.341999 47.082001 38.300999 48.366001 38.300999 c
49.649002 38.300999 50.691002 39.341999 50.691002 40.625999 c
50.691002 41.91 49.647999 42.950001 48.366001 42.950001 c
h
55.338001 45.938 m
54.055 45.938 53.013 44.896999 53.013 43.612999 c
53.013 42.328999 54.055 41.288998 55.338001 41.288998 c
56.621002 41.288998 57.662003 42.328999 57.662003 43.612999 c
57.662003 44.896999 56.620998 45.938 55.338001 45.938 c
h
61.979 48.925999 m
60.695999 48.925999 59.654999 47.885998 59.654999 46.601997 c
59.654999 45.317997 60.695999 44.277996 61.979 44.277996 c
63.263 44.277996 64.303001 45.317997 64.303001 46.601997 c
64.303001 47.887001 63.263 48.925999 61.979 48.925999 c
h
W
[90.000076 0 0 40.953913 4.999784 29.523317] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.016209 def
/yMin -0.039711 def
/xMax 1.02169 def
/yMax 1.006197 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
-0.016209 1.02169 0 axialSH
Q
Q
q
[54.339336 0 0 54.355171 269.45523 4042.9893] cm
q
12.62 20 m
10.84 16.02 l
2.8 16.02 l
1.02 20 l
0.4 20 l
6.66 6 l
6.960001 6 l
13.240001 20 l
12.620001 20 l
12.62 20 l
h
3.04 15.46 m
10.6 15.46 l
6.820001 7 l
3.04 15.46 l
h
29.059999 6 m
29.059999 20 l
28.48 20 l
28.48 7.3 l
22.139999 20 l
21.76 20 l
15.42 7.28 l
15.42 20 l
14.84 20 l
14.84 6 l
15.42 6 l
21.959999 19.1 l
28.48 6 l
29.059999 6 l
h
37.360001 12.36 m
39.5 12.78 40.540001 14.5 40.540001 16.1 c
40.540001 18.48 38.940002 20 35.5 20 c
31.459999 20 l
31.459999 6 l
35.860001 6 l
38.48 6 39.740002 7.5 39.740002 9.28 c
39.740002 10.46 39.16 11.76 37.360001 12.36 c
h
35.860001 6.56 m
32.040001 6.56 l
32.040001 12.08 l
35.860001 12.08 l
37.779999 12.08 39.18 10.94 39.18 9.3 c
39.18 7.62 37.959999 6.56 35.860001 6.56 c
35.860001 6.56 l
h
35.52 19.440001 m
38.619999 19.440001 39.959999 18.200001 39.959999 16.120001 c
39.959999 14.340001 38.619999 12.640001 35.799999 12.640001 c
32.040001 12.640001 l
32.040001 19.440002 l
35.52 19.440002 l
35.52 19.440001 l
h
53.459999 20 m
51.68 16.02 l
43.639999 16.02 l
41.860001 20 l
41.240002 20 l
47.5 6 l
47.799999 6 l
54.079998 20 l
53.459999 20 l
h
43.880001 15.46 m
51.440002 15.46 l
47.660004 7 l
43.880001 15.46 l
h
65.339996 20 m
64.619995 20 l
60.539993 14.62 l
60.339993 14.64 60.139992 14.64 59.939995 14.64 c
56.259995 14.64 l
56.259995 20 l
55.679993 20 l
55.679993 6 l
59.939995 6 l
63.079994 6 64.739998 7.94 64.739998 10.3 c
64.739998 12.38 63.519997 14.1 61.179996 14.54 c
65.339996 20 l
h
56.259998 14.04 m
60.019997 14.04 l
62.539997 14.04 64.159996 12.58 64.159996 10.3 c
64.159996 7.980001 62.539997 6.58 60.019997 6.58 c
56.259998 6.58 l
56.259998 14.04 l
h
78.559998 20 m
76.779999 16.02 l
68.739998 16.02 l
66.959999 20 l
66.339996 20 l
72.599998 6 l
72.900002 6 l
79.18 20 l
78.559998 20 l
h
68.980003 15.46 m
76.540001 15.46 l
72.760002 7 l
68.980003 15.46 l
h
W
[78.780001 0 0 13.999999 0.4 5.999997] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
0 1 0 axialSH
Q
Q
q
[54.339336 0 0 54.355171 4710.3076 4042.9893] cm
q
12.22 20 m
9.120001 20 l
6.140001 15.34 l
6.100001 15.34 l
4.120001 15.34 l
4.120001 20 l
1.200001 20 l
1.200001 6 l
6.100001 6 l
9.240001 6 11.280001 7.9 11.280001 10.76 c
11.280001 12.66 10.360001 14.08 8.800001 14.8 c
12.22 20 l
h
4.12 8.68 m
4.12 12.82 l
5.92 12.82 l
7.36 12.82 8.360001 12.259999 8.360001 10.76 c
8.360001 9.280001 7.360001 8.68 5.920001 8.68 c
4.120001 8.68 l
4.12 8.68 l
h
33.360001 6 m
28.76 20 l
26.66 20 l
23.379999 11.14 l
20.119999 20 l
18.019999 20 l
13.419998 6 l
16.499998 6 l
19.179998 14.3 l
22.239998 6 l
24.539997 6 l
27.599997 14.3 l
30.279997 6 l
33.359997 6 l
33.360001 6 l
h
43.619999 20 m
42.559998 17.5 l
35.799995 17.5 l
34.739994 20 l
31.639994 20 l
37.859993 6 l
40.499992 6 l
46.73999 20 l
43.619991 20 l
43.619999 20 l
h
36.82 15.12 m
41.540001 15.12 l
39.18 9.58 l
36.82 15.12 l
h
57.5 6 m
60.419998 6 l
60.419998 20 l
58.199997 20 l
51.259998 11.32 l
51.259998 20 l
48.339996 20 l
48.339996 6 l
50.599995 6 l
57.499996 14.7 l
57.499996 6 l
57.5 6 l
h
67.82 6 m
71.800003 6 74.919998 9.12 74.919998 12.92 c
74.919998 16.880001 71.799995 20 67.82 20 c
62.82 20 l
62.82 6 l
67.82 6 l
h
67.800003 17.24 m
70.480003 17.24 71.920006 15.299999 71.920006 12.92 c
71.920006 10.7 70.480003 8.76 67.800003 8.76 c
65.740005 8.76 l
65.740005 17.24 l
67.800003 17.24 l
h
88.099998 20 m
87.040001 17.5 l
80.279999 17.5 l
79.220001 20 l
76.120003 20 l
82.340004 6 l
84.980003 6 l
91.220001 20 l
88.099998 20 l
h
81.300003 15.12 m
86.020004 15.12 l
83.660004 9.58 l
81.300003 15.12 l
h
W
[90.020003 0 0 13.999999 1.200003 5.999997] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
